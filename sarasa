SSL needs per-connection space for:

    the socket FD
    about 16k for a receive buffer for the maximum possible SSL record, which varies slightly with the cipher suite
    an output buffer, probably also about 16k
    space to compute per-message MACs in
    handshake status, connection status, handshake MAC, etc.
    a pointer to the SSL session, which is shareable among connections to the same target, and which must contain the cipher suite, protocol, premaster secret, shared secret, session ID, peer certificate chain, timeout variables, ...
    whatever else I haven't thought of.

In addition the TCP connection will consume kernel space, e.g. for the socket send and receive buffers


SSL needs about 128K or even more (depending on implementation) per connection for memory buffers so you probably won't be able to reduce amount of memory used. 


mod_ssl Bug and SSL Labs Renegotiation Test
Posted by Yash Sannegowda in SSL Labs on January 23, 2019 10:48 PM

Update March 13, 2019: SSL Labs Renegotiation Test is re-enabled on the production instance.

Update March 12, 2019: SSL Labs Renegotiation Test is re-enabled on the development instance, and will be live on the production instance this week.

Update February 20, 2019: To give more time to fix, we will re-enable the SSL Labs Renegotiation Test on March 11, 2019 (two additional weeks).

The Apache Security Team fixed a bug which triggers whenever a client attempts renegotiation with Apache HTTP Server 2.4.37 and OpenSSL 1.1.1. This bug causes the Apache httpd service to consume 100% CPU. Details of the bug can be found at: https://bz.apache.org/bugzilla/show_bug.cgi?id=63052

Local testing by Qualys confirms that the SSL Labs renegotiation test triggers this bug for the above-mentioned server configuration, and can be used to cause the Apache httpd service on a target system to consume 100% CPU.

To allow Apache users time to apply the fix, SSL Labs has disabled the Renegotiation Test for one month, and we will re-enable it on February 25, 2019. While the test is disabled, users will not see the following in SSL Labs reports:



    Client Hello - The client sends a Client Hello message proposing SSL/TLS options (specifying the TLS version and a list of suggested cipher suites it supports).
    Server Hello - The server responds with a Server Hello message selecting the SSL/TLS options (with the TLS version and a chosen cipher suite).
    Certificate from Server - The server presents an X.509 certificate or certificate chain to the client for verification as part of the initial TLS handshake.
    Server Certificate Request - The server then requests a certificate from the client so the connection can be mutually authenticated. (optional)
    Server Key Exchange - The server sends the client a Server Key Exchange message with the Public Key information sent in step 3.
    Server Hello Done - The server sends a Server Hello Done message to tell client it is finished with initial negotiations.
    Certificate from client - If the server requests a certificate, the client must send the certificate or certificate chain.
    Client Key Exchange - The client sends a Client Key Exchange message which may contain a PreMasterSecret, Public Key, or nothing depending on the cipher suite chosen.
    Certificate Verify - This message is sent when the client presents a certificate as above. Its purpose is to allow the server to complete the process of authenticating the client.
    Change cipher spec - The client sends a message telling the server to change to encrypted mode.
    Finished - The server tells the client that it is ready for secure data communication to begin. This is the end of the SSL handshake.
    Change Cipher Spec. - The server sends a message telling the client to change to encrypted mode.
    Finished - The server tells the client that it is ready for secure data communication to begin. This is the end of the SSL handshake.
    Encrypted data - The client and the server communicate using the symmetric encryption algorithm and the cryptographic hash function negotiated in Messages 1 and 2, and using the secret key that the client sent to the server in Message 8.
    Close Messages - At the end of the connection, each side will send a close_notify message to inform the peer that the connection is closed.

